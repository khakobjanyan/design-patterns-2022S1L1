package main.implementation;

import main.model.RubikCube;

public class RubikCube3x3SolverImpl implements RubikCubeSolverImpl {

    private final Integer sideSize = 3;

    private final CubeEngine engine = CubeEngine.getInstance(); // some fake library that gives engine which solves any cube with minimal steps

    @Override
    public void solveWithEngine(RubikCube rubikCube) {
        if (this.sideSize.equals(rubikCube.getSideSize())) {
            engine.solvePuzzle(rubikCube);
        } else {
            System.out.println("Wrong implementation class is used.");
        }
    }

    @Override
    public void solveWithAlgorithm(RubikCube rubikCube, String algorithmName) {
        if (this.sideSize.equals(rubikCube.getSideSize()) && algorithmName.equals("Fridrich")) {
            // Fridrich method steps that solve cube
            System.out.println("Done");
        } else {
            System.out.println("Not possible to solve given cube with given algorithm");
        }
    }

    public Integer getSideSize() {
        return sideSize;
    }
}

